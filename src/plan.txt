//for the design, have a menu on the left hand side.
//this menu will have 'tracks, artists, playlists'.

the center of the window will be a track/artist/playlist list/display. so there are going to be three distinct
views in the middle: a list of tracks, a list albums, and a list of playlists. clicking on the albums/playlists will then case
progression to their respective list of tracks.

will need action listeners to determine which window we are currently on.

the play information and controlls will be on the very bottom of the player - have a slider, variable play/pause button
and forward/back controls.

the meny and toolbar ar the top of the page will be used to perform actions such as load in more music.
there will be an option to load in an entire directory as al abum, or to search for individual tracks.

there will also be an option to create playlists, and then add tracks to these playlists (or delete them even).

there are questions for data access here; i think the way of doing this will be to have a random access file that is generated
to keep track of playlist and album data. this file will be saved to upon any changes to playlists, and upon closing, and
will be loaded upon the application start. will store this as simply binary data just to have a bit more java.nio practice

actually now that i think about it it makes the most sense to load all file data on the program start,
given that only file objects or evne paths are stored for tracks it is not like any music files have ot be
loaded for this to happen. to there are three lists that are loaded upon start - list of all tracks, list of all albums,
list of all playlists. depending on whether user has selected album track or playlist view will determine which of these
will populate the central listview (not sure on how else to sort it, so i guess lists make the most sense).


OK TO SOLVE THREAD ISSUES:
will split all of the file loading and shit out of hte music playuer class, put it in the datastorage or
its own unique class, (FileManager, MusicPlayer, DataStorage).

                                                Will need to for MusicPlayer, extend the thread class, override the run method to properly sort out
                                                having the music player as single-threaded only.